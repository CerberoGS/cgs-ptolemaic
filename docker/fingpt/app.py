import os
import torch
from fastapi import FastAPI
from pydantic import BaseModel
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig

# Configuración para cargar el modelo con menos recursos (cuantización)
# This helps use less RAM/VRAM
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

# 1. Definir el modelo y el directorio de caché
# Uses an environment variable for configuration
# This directory (CACHE_DIR) will be mounted as a Docker volume
MODEL_NAME = "FinGPT/fingpt-forecaster_dow30_llama2-7b_lora" 
CACHE_DIR = os.environ.get("CACHE_DIR", "/models")

# 2. Inicializar la App FastAPI
app = FastAPI(title="CGS Ptolemaic IA Service (Local)")

# 3. Cargar los componentes del modelo (Tokenizer y Modelo)
# This runs ONCE when the container starts
print(f"Loading tokenizer: {MODEL_NAME}...")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, cache_dir=CACHE_DIR)

print(f"Loading model: {MODEL_NAME}...")
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    cache_dir=CACHE_DIR,
    quantization_config=bnb_config,
    device_map="auto", # "auto" will try to use the GPU if available
    trust_remote_code=True # Needed for some custom models
)
print("Model loaded successfully.")

# 4. Definir los modelos de datos de entrada y salida para la API
class GenerationRequest(BaseModel):
    prompt: str
    max_new_tokens: int = 150 # Default value for max tokens to generate

class GenerationResponse(BaseModel):
    text: str

# 5. Crear el endpoint de la API
@app.post("/api/v1/generate", response_model=GenerationResponse)
async def generate_text(request: GenerationRequest):
    """
    Receives a prompt and returns text generated by FinGPT.
    """
    try:
        # Prepare the input for the model
        inputs = tokenizer(request.prompt, return_tensors="pt").to(model.device)
        
        # Generate the output
        outputs = model.generate(
            **inputs,
            max_new_tokens=request.max_new_tokens,
            pad_token_id=tokenizer.eos_token_id # Avoids warnings
        )
        
        # Decode the response from token IDs to text
        generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True)
        
        # Clean the original prompt from the response (optional, but cleaner)
        cleaned_text = generated_text.replace(request.prompt, "").strip()

        return GenerationResponse(text=cleaned_text)

    except Exception as e:
        # Basic error handling
        return {"error": str(e)}, 500

@app.get("/health")
async def health_check():
    """Simple endpoint to check if the service is alive."""
    return {"status": "ok"}

# This part is automatically handled by uvicorn command in Dockerfile
# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="0.0.0.0", port=8000)